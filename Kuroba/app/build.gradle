apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.undercouch.download'

android {
    // !!! IMPORTANT !!!
    // When changing any of the following: compileSdkVersion, targetSdkVersion
    // don't forget to also update travis.yml config
    // !!! IMPORTANT !!!

    buildToolsVersion "29.0.3"
    compileSdkVersion 29

    def getCommitHash = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29

        /**
         * ------------------------------------------------------------
         *
         *              CHANGE PER RELEASE BUILD
         *              SEE docs/release.txt FOR INFO
         *
         * ------------------------------------------------------------
         */
        //bump the MAJOR (XX) version when there are incompatible changes between versions
        //or major changes to the application that would require a reinstall
        //bump the MINOR (YY) version when there are compatible changes between versions (ie database changes)
        //or if there are big application level changes like tearing out/adding major features
        //bump the PATCH (ZZ) version otherwise, for anything small
        int major = 4
        int minor = 12
        int patch = 0

        /**
         * ------------------------------------------------------------
         *
         *              CHANGE PER NEW FORK MODIFICATION
         *              IF AND ONLY IF NECESSARY
         *
         * ------------------------------------------------------------
         */
        // if you change this, also change the AndroidManifest package
        applicationId "com.github.k1rakishou.chan"
        // ALL ENDPOINTS SHOULD BE HTTPS

        // CHANGE THESE TO YOUR GITHUB REPOSITORY
        // the repo endpoint is also used to calculate the issues endpoint
        // the resources endpoint is for any static resources; currently this is mostly used for various images used internally,
        // but using a remote resource works easier with the application architecture than using a local resource/drawable
        buildConfigField "String", "UPDATE_API_ENDPOINT", "\"https://api.github.com/repos/K1rakishou/Kuroba-Experimental/releases/latest\""
        buildConfigField "String", "GITHUB_ENDPOINT", "\"https://github.com/K1rakishou/Kuroba-Experimental\""
        buildConfigField "String", "RESOURCES_ENDPOINT", "\"https://raw.githubusercontent.com/K1rakishou/Kuroba-Experimental/release/docs/\""
        // this is for your development server endpoint
        // you WILL need to change the code in UpdateManager if your endpoint changes or you use a different API structure
        buildConfigField "String", "DEV_API_ENDPOINT", "\"https://kuroba.io:8443\""
        // this is for checking who's built what in debug logs
        buildConfigField "String", "SIGNATURE", "\"8952c098\""
        // this is the default dev signing signature, update it if you change the dev keystore
        buildConfigField "String", "DEV_SIGNATURE", "\"10d4e433\""

        /**
         * ------------------------------------------------------------
         *
         *              DON'T CHANGE THESE AUTO-CALCULATIONS
         *              USED FOR VERSION CODE GENERATION
         *              USED FOR VERSION NAME GENERATION
         *              USED FOR AUTO UPDATER NAMING CONSISTENCY
         *
         * ------------------------------------------------------------
         */
        versionCode major * 10000 + minor * 100 + patch
        versionName "v" + major + "." + minor + "." + patch

        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = manifestPlaceholders.get("appName").toString() + ".apk"
            }
        }

        buildConfigField "String", "COMMIT_HASH", "\"" + getCommitHash() + "\""

        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

    kapt {
        correctErrorTypes = true
    }

    flavorDimensions "default"

    productFlavors {
        stable {
            dimension "default"
            applicationIdSuffix ""
            versionNameSuffix ""

            buildConfigField "boolean", "DEV_BUILD", "false"
            buildConfigField "int", "UPDATE_DELAY", "5"

            // These are manifest placeholders for the application name, icon location and file
            // provider authority (the file provider authority should differ for different flavors
            // otherwise the app will not work)
            manifestPlaceholders = [
                    appName              : "KurobaEx",
                    iconLoc              : "@mipmap/ic_launcher",
                    fileProviderAuthority: "${defaultConfig.applicationId}${applicationIdSuffix}.fileprovider",
                    devBuild             : false
            ]
        }
        dev {
            dimension "default"
            // Different app ids for different flavors so that the users are able to install both
            // of them without deleting anything
            applicationIdSuffix ".dev"
            versionNameSuffix "-${getCommitHash().substring(0, 7)}"

            // To easily figure out whether the app uses development flavors or not
            buildConfigField "boolean", "DEV_BUILD", "true"
            buildConfigField "int", "UPDATE_DELAY", "1"

            // The same as in stable flavor
            manifestPlaceholders = [
                    appName              : "KurobaEx-dev",
                    iconLoc              : "@mipmap/ic_launcher",
                    fileProviderAuthority: "${defaultConfig.applicationId}${applicationIdSuffix}.fileprovider",
                    devBuild             : true
            ]
        }
    }

    buildTypes {
        // manifestPlaceholders do not work here for some reason so here is a little hack.
        // We need to iterate each build variant and for each build variant we need to find it's
        // flavor then we need to extract the versionNameSuffix from the flavor and update the output
        // apk name with it.
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                Object flavor = getCurrentFlavor(variant.flavorName)
                if (flavor == null) {
                    throw new GradleException("Couldn't find flavor by variant.flavorName = ${variant.flavorName}")
                }

                outputFileName = "KurobaEx${flavor.versionNameSuffix}.apk"
            }
        }

        release {
            /*
            If you want to sign releases without using "Generate Signed APK", make a file in app/keys.properties with the following content:
            keystoreFile=yourkey.store
            keystorePass=pass
            keyAlias=alias
            keyPass=pass
            */
            // Just select your build variant (debug/release) and do Build -> APK
            File f = file('keys.properties')
            if (f.exists()) {
                Properties props = new Properties()
                InputStream is = new FileInputStream(f)
                props.load(is)

                signingConfigs {
                    release {
                        storeFile file(props['keystoreFile'])
                        storePassword props['keystorePass']
                        keyAlias props['keyAlias']
                        keyPassword props['keyPass']

                        v1SigningEnabled true
                        v2SigningEnabled true
                    }
                }

                is.close()
                signingConfig signingConfigs.release
            }
            // Because we're always on dev, don't minify to make sure that crash logs are intelligible
            //You can turn this on if you wish
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.cfg'
            debuggable = false
        }
        debug {
            File f = file('debug.properties')
            if (f.exists()) {
                Properties props = new Properties()
                InputStream is = new FileInputStream(f)
                props.load(is)

                signingConfigs {
                    debug {
                        storeFile file(props['keystoreFile'])
                        storePassword props['keystorePass']
                        keyAlias props['keyAlias']
                        keyPassword props['keyPass']

                        v1SigningEnabled true
                        v2SigningEnabled true
                    }
                }

                is.close()
                signingConfig signingConfigs.debug
            }

            minifyEnabled false
            debuggable = true
        }
    }
}

dependencies {
    implementation project(':core-common')
    implementation project(':core-model')

    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.slidingpanelayout:slidingpanelayout:1.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.google.android.exoplayer:exoplayer:2.11.3'
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation 'com.j256.ormlite:ormlite-core:5.1'
    implementation 'com.j256.ormlite:ormlite-android:5.1'
    implementation 'org.jsoup:jsoup:1.12.2'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.19'
    implementation 'com.davemorrissey.labs:subsampling-scale-image-view:3.10.0'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'org.nibor.autolink:autolink:0.10.0'
    implementation "com.google.code.gson:gson:${versions.gson}"
    implementation 'me.xdrop:fuzzywuzzy:1.2.0'
    implementation 'com.vladsch.flexmark:flexmark:0.60.2'
    implementation ('com.vdurmont:emoji-java:5.1.1') {
        exclude group: 'org.json', module: 'json'
    }
    implementation 'io.reactivex.rxjava2:rxjava:2.2.17'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin_compiler}"
    implementation "joda-time:joda-time:${versions.joda_time}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlin_coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlin_coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:${versions.kotlin_coroutines_version}"
    implementation "io.coil-kt:coil-base:0.10.1"

    implementation 'com.github.K1rakishou:Feather2:ec21592613'
    // noinspection GradleDependency wants to upgrade to older version
    implementation 'com.github.K1rakishou:Fuck-Storage-Access-Framework:v1.0-alpha40'

    implementation "androidx.room:room-runtime:${versions.room_version}"
    kapt "androidx.room:room-compiler:${versions.room_version}"

    implementation "com.google.dagger:dagger-android:${versions.dagger_version}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger_version}"

    implementation "com.airbnb.android:epoxy:${versions.epoxy}"
    kapt "com.airbnb.android:epoxy-processor:${versions.epoxy}"

    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.mockwebserver}"
    testImplementation "org.mockito:mockito-core:${versions.mockito_core}"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockito_kotlin}"

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'
}

// Download the current archives.json file for the build
task downloadArchives {
    try {
        download {
            src 'https://nstepien.github.io/archives.json/archives.json'
            dest projectDir.path + File.separator + "src" + File.separator + "main" + File.separator + "assets"
        }
    } catch (Exception ignored) {
    }
}
preBuild.dependsOn downloadArchives

//====================================================================
// All of the below functions are being used by the upload_apk script
//====================================================================

def getCurrentFlavor(String name) {
    Object resultFlavor = null

    android.productFlavors.all { flavor ->
        if (flavor.name == name) {
            resultFlavor = flavor
        }
    }

    return resultFlavor
}

def getLatestCommit(String branchName) {
    def stdout = new ByteArrayOutputStream()
    exec {
        def printArgs = "%H; %ad; %s"

        commandLine 'git', 'log', branchName, '-n 1', "--pretty=format:${printArgs}", "--date=iso8601-strict"
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

def getLastCommitsFromCommitByHash(String branchName, String from) {
    def stdout = new ByteArrayOutputStream()
    exec {
        def printArgs = "%H; %ad; %s"

        commandLine 'git', 'log', branchName, "${from}..HEAD", "--pretty=format:${printArgs}", "--date=iso8601-strict"
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

def checkBranchExists(String branchName) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--verify', branchName
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

task checkBranchExistsTask {
    doLast {
        println(checkBranchExists(branch_name))
    }
}

task getLatestCommitTask {
    doLast {
        println(getLatestCommit(branch_name))
    }
}

task getLastCommitsFromCommitByHashTask {
    doLast {
        println(getLastCommitsFromCommitByHash(branch_name, from))
    }
}

task getVersionCodeTask {
    doLast {
        println(project.android.defaultConfig.versionCode)
    }
}
